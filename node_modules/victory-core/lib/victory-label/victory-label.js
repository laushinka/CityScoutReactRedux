Object.defineProperty(exports,"__esModule",{value:true});var _pick2=require("lodash/pick");var _pick3=_interopRequireDefault(_pick2);var _merge2=require("lodash/merge");var _merge3=_interopRequireDefault(_merge2);var _assign2=require("lodash/assign");var _assign3=_interopRequireDefault(_assign2);var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=require("react");var _react2=_interopRequireDefault(_react);
var _index=require("../victory-util/index");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}


var defaultStyles={
backgroundColor:"#d9d9d9",
fill:"#252525",
fontSize:14,
fontFamily:"'Gill Sans', 'Gill Sans MT', 'SerÂ­avek', 'Trebuchet MS', sans-serif",
stroke:"transparent"};var


VictoryLabel=function(_React$Component){_inherits(VictoryLabel,_React$Component);function VictoryLabel(){_classCallCheck(this,VictoryLabel);return _possibleConstructorReturn(this,Object.getPrototypeOf(VictoryLabel).apply(this,arguments));}_createClass(VictoryLabel,[{key:"getStyles",value:function getStyles(



















































































































































props){
var style=props.style?(0,_merge3.default)({},defaultStyles,props.style):defaultStyles;
var datum=props.datum||props.data;
return _index.Helpers.evaluateStyle(style,datum);
}},{key:"getHeight",value:function getHeight(

props,type){
var datum=props.datum||props.data;
return _index.Helpers.evaluateProp(props[type],datum);
}},{key:"getContent",value:function getContent(

props){
var text=props.text||props.children;
if(text){
var datum=props.datum||props.data;
var child=_index.Helpers.evaluateProp(text,datum);
return(""+child).split("\n");
}
return[""];
}},{key:"getDy",value:function getDy(

props,content,lineHeight){
var datum=props.datum||props.data;
var dy=props.dy?_index.Helpers.evaluateProp(props.dy,datum):0;
var length=content.length;
var capHeight=this.getHeight(props,"capHeight");
var verticalAnchor=props.verticalAnchor?
_index.Helpers.evaluateProp(props.verticalAnchor,datum):"middle";
switch(verticalAnchor){
case"end":
return dy+capHeight/2+(0.5-length)*lineHeight;
case"middle":
return dy+capHeight/2+(0.5-length/2)*lineHeight;
default:
return dy+capHeight/2+lineHeight/2;}

}},{key:"getTransform",value:function getTransform(

props){
var style=this.getStyles(props);var
datum=props.datum;var x=props.x;var y=props.y;
var angle=props.angle||style.angle;
var transform=props.transform||style.transform;
var transformPart=transform&&_index.Helpers.evaluateProp(transform,datum);
var rotatePart=angle&&{rotate:[angle,x,y]};
return(transformPart||angle)&&_index.Style.toTransformString(transformPart,rotatePart);
}},{key:"renderElements",value:function renderElements(

props,content){
var transform=this.getTransform(props);
var textProps=(0,_pick3.default)(props,["dx","dy","x","y","style","textAnchor"]);
var fontSize=props.style&&props.style.fontSize||14;
return(
_react2.default.createElement("text",_extends({},textProps,{
transform:transform},
props.events),

content.map(function(line,i){
var dy=i?props.lineHeight*fontSize:undefined;
return(
_react2.default.createElement("tspan",{key:i,x:props.x,dy:dy},
line));


})));


}},{key:"render",value:function render()

{
var datum=this.props.datum||this.props.data;
var style=this.getStyles(this.props);
var lineHeight=this.getHeight(this.props,"lineHeight");
var textAnchor=this.props.textAnchor?
_index.Helpers.evaluateProp(this.props.textAnchor,datum):"start";
var content=this.getContent(this.props);
var dx=this.props.dx?_index.Helpers.evaluateProp(this.props.dx,datum):0;
var dy=this.getDy(this.props,content,lineHeight)*style.fontSize;
var labelProps=(0,_assign3.default)(
{},this.props,{dy:dy,dx:dx,datum:datum,lineHeight:lineHeight,textAnchor:textAnchor,style:style},this.props.events);

return this.renderElements(labelProps,content);
}}]);return VictoryLabel;}(_react2.default.Component);VictoryLabel.displayName="VictoryLabel";VictoryLabel.propTypes={/**
     * Specifies the angle to rotate the text by.
     */angle:_react.PropTypes.oneOfType([_react.PropTypes.string,_react.PropTypes.number]),/**
     * The capHeight prop defines a text metric for the font being used: the
     * expected height of capital letters. This is necessary because of SVG,
     * which (a) positions the *bottom* of the text at `y`, and (b) has no
     * notion of line height. The value should ideally use the same units as
     * `lineHeight` and `dy`, preferably ems. If given a unitless number, it
     * is assumed to be ems.
     */capHeight:_react.PropTypes.oneOfType([_react.PropTypes.string,_index.PropTypes.nonNegative,_react.PropTypes.func]),/**
     * Victory components can pass a datum prop to their label component. This can
     * be used to calculate functional styles, and determine child text
     */datum:_react.PropTypes.object,/**
     * Labels that apply to an entire data series will recieve the entire series
     * as `data` instead of an individual datum prop.
     */data:_react.PropTypes.array,/**
     * The events prop attaches arbitrary event handlers to the label component.
     * Event handlers are currently only called with their corresponding events.
     * @examples {(evt) => alert(`x: ${evt.clientX}, y: ${evt.clientY}`)}
     */events:_react.PropTypes.object,/**
     * all Victory components will pass a text prop to their label component.
     * This defines the content of the label when child nodes are absent. It
     * will be ignored if children are provided.
     */text:_react.PropTypes.oneOfType([_react.PropTypes.string,_react.PropTypes.number,_react.PropTypes.func]),/**
     * The children of this component define the content of the label. This
     * makes using the component similar to normal HTML spans or labels.
     * strings, numbers, and functions of data / value are supported.
     */children:_react.PropTypes.oneOfType([// TODO: Expand child support in future release
_react.PropTypes.string,_react.PropTypes.number,_react.PropTypes.func]),/**
     * The lineHeight prop defines how much space a single line of text should
     * take up. Note that SVG has no notion of line-height, so the positioning
     * may differ slightly from what you would expect with CSS, but the result
     * is similar: a roughly equal amount of extra space is distributed above
     * and below the line of text. The value should ideally use the same units
     * as `capHeight` and `dy`, preferably ems. If given a unitless number, it
     * is assumed to be ems.
     */lineHeight:_react.PropTypes.oneOfType([_react.PropTypes.string,_index.PropTypes.nonNegative,_react.PropTypes.func]),/**
     * The style prop applies CSS properties to the rendered `<text>` element.
     */style:_react.PropTypes.object,/**
     * The textAnchor prop defines how the text is horizontally positioned
     * relative to the given `x` and `y` coordinates.
     */textAnchor:_react.PropTypes.oneOfType([_react.PropTypes.oneOf(["start","middle","end","inherit"]),_react.PropTypes.func]),/**
     * The verticalAnchor prop defines how the text is vertically positioned
     * relative to the given `x` and `y` coordinates.
     */verticalAnchor:_react.PropTypes.oneOfType([_react.PropTypes.oneOf(["start","middle","end"]),_react.PropTypes.func]),/**
     * The transform prop applies a transform to the rendered `<text>` element.
     * In addition to being a string, it can be an object containing transform
     * definitions for easier authoring.
     */transform:_react.PropTypes.oneOfType([_react.PropTypes.string,_react.PropTypes.object,_react.PropTypes.func]),/**
     * The x prop defines the x coordinate to use as a basis for horizontal
     * positioning.
     */x:_react.PropTypes.number,/**
     * The y prop defines the y coordinate to use as a basis for vertical
     * positioning.
     */y:_react.PropTypes.number,/**
     * The dx prop defines a horizontal shift from the `x` coordinate.
     */dx:_react.PropTypes.oneOfType([_react.PropTypes.number,_react.PropTypes.string,_react.PropTypes.func]),/**
     * The dy prop defines a vertical shift from the `y` coordinate. Since this
     * component already accounts for `capHeight`, `lineHeight`, and
     * `verticalAnchor`, this will usually not be necessary.
     */dy:_react.PropTypes.oneOfType([_react.PropTypes.number,_react.PropTypes.string,_react.PropTypes.func])};VictoryLabel.defaultProps={capHeight:0.71,// Magic number from d3.
lineHeight:1};exports.default=VictoryLabel;