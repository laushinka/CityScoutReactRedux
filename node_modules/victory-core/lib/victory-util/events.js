Object.defineProperty(exports,"__esModule",{value:true});var _property2=require("lodash/property");var _property3=_interopRequireDefault(_property2);var _isEmpty2=require("lodash/isEmpty");var _isEmpty3=_interopRequireDefault(_isEmpty2);var _isFunction2=require("lodash/isFunction");var _isFunction3=_interopRequireDefault(_isFunction2);var _partial2=require("lodash/partial");var _partial3=_interopRequireDefault(_partial2);var _merge2=require("lodash/merge");var _merge3=_interopRequireDefault(_merge2);var _extend7=require("lodash/extend");var _extend8=_interopRequireDefault(_extend7);var _assign2=require("lodash/assign");var _assign3=_interopRequireDefault(_assign2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}

/* Example Event Prop
    [
      {
        childName: "firstBar",
        target: "data",
        eventKey: 1,
        eventKey: "thisOne",
        eventHandlers: {
          onClick: () => {},
          ...
        }
      },
      {
        target: "labels",
        eventHandlers: {
          onClick: () => {}
        }
      }
    ]


  */

/* Example Event handler return
  [
    {
      childName: "fistBar",
      target: "data",
      eventKey: 1,
      mutation: (propsForTarget) => {
        return {style: merge({}, propsForTarget.style, {fill: "red"})}
      }
    },
    {
      target: "labels",
      eventKey: 2,
      mutation: () => { return {text: "hello"}; }
    }
  ]
  */exports.default=

{
getPartialEvents:function getPartialEvents(events,eventKey,childProps){
return events?
Object.keys(events).reduce(function(memo,eventName){
/* eslint max-params: 0 */
memo[eventName]=(0,_partial3.default)(
events[eventName],
_partial3.default.placeholder,// evt will still be the first argument for event handlers
childProps,// event handlers will have access to data component props, including data
eventKey,// used in setting a unique state property
eventName// used in setting a unique state property
);
return memo;
},{}):
{};
},

getScopedEvents:function getScopedEvents(events,namespace,childType,baseProps){var _this=this;
if((0,_isEmpty3.default)(events)){
return{};
}

baseProps=baseProps||this.baseProps;
var getTargetProps=function getTargetProps(identifier,type){var
childName=identifier.childName;var target=identifier.target;var key=identifier.key;
var baseType=type==="props"?baseProps:_this.state;
var base=!childName||!baseType[childName]?baseType:baseType[childName];
return key==="parent"?base.parent:base[key]&&base[key][target];
};

var parseEvent=function parseEvent(eventReturn,eventKey){
var childNames=namespace==="parent"?
eventReturn.childName:eventReturn.childName||childType;
var target=eventReturn.target||namespace;

var getKeys=function getKeys(childName){
if(baseProps.all||baseProps[childName]&&baseProps[childName].all){
return"all";
}else if(eventReturn.eventKey==="all"){
return baseProps[childName]?
Object.keys(baseProps[childName]):Object.keys(baseProps);
}else if(eventReturn.eventKey===undefined&&eventKey==="parent"){
return baseProps[childName]?
Object.keys(baseProps[childName]):Object.keys(baseProps);
}
return eventReturn.eventKey!==undefined?eventReturn.eventKey:eventKey;
};

var getMutationObject=function getMutationObject(key,childName){
var nullFunction=function nullFunction(){return null;};
var mutationTargetProps=getTargetProps({childName:childName,key:key,target:target},"props");
var mutationTargetState=getTargetProps({childName:childName,key:key,target:target},"state");
var mutation=eventReturn.mutation||nullFunction;
var mutatedProps=mutation(
(0,_assign3.default)({},mutationTargetProps,mutationTargetState),baseProps);

var childState=_this.state[childName]||{};
return childName?
(0,_extend8.default)(_this.state,_defineProperty({},
childName,(0,_extend8.default)(childState,_defineProperty({},
key,(0,_extend8.default)(childState[key],_defineProperty({},target,mutatedProps)))))):


(0,_extend8.default)(_this.state,_defineProperty({},
key,(0,_extend8.default)(_this.state[key],_defineProperty({},target,mutatedProps))));

};

var getReturnByChild=function getReturnByChild(childName){
var mutationKeys=getKeys(childName);
return Array.isArray(mutationKeys)?
mutationKeys.reduce(function(memo,key){
return(0,_assign3.default)(memo,getMutationObject(key,childName));
},{}):
getMutationObject(mutationKeys,childName);
};

return Array.isArray(childNames)?childNames.reduce(function(memo,childName){
return(0,_assign3.default)(memo,getReturnByChild(childName));
},{}):getReturnByChild(childNames);
};

var parseEventReturn=function parseEventReturn(eventReturn,eventKey){
return Array.isArray(eventReturn)?
eventReturn.reduce(function(memo,props){
memo=(0,_merge3.default)({},memo,parseEvent(props,eventKey));
return memo;
},{}):
parseEvent(eventReturn,eventKey);
};

var onEvent=function onEvent(evt,childProps,eventKey,eventName){
var eventReturn=events[eventName](evt,childProps,eventKey);
if(eventReturn){
_this.setState(parseEventReturn(eventReturn,eventKey));
}
};

return Object.keys(events).reduce(function(memo,event){
memo[event]=onEvent;
return memo;
},{});
},

getEvents:function getEvents(props,target,eventKey,getScopedEvents){
var getEventsFromProps=function getEventsFromProps(events){

var getSelectedEvents=function getSelectedEvents(){
var targetEvents=events.reduce(function(memo,event){
if(event.target!==undefined){
return""+event.target===""+target?memo.concat(event):memo;
}
return memo.concat(event);
},[]);

if(eventKey!==undefined&&target!=="parent"){
return targetEvents.filter(function(obj){
var targetKeys=obj.eventKey;
var useKey=function useKey(key){return key?""+key===""+eventKey:true;};
return Array.isArray(targetKeys)?
targetKeys.some(function(k){return useKey(k);}):useKey(targetKeys);
});
}
return targetEvents;
};

var selectedEvents=getSelectedEvents();
return Array.isArray(selectedEvents)&&selectedEvents.reduce(function(memo,event){
return event?(0,_assign3.default)(memo,event.eventHandlers):memo;
},{});
};

var ownEvents=props.events&&getScopedEvents(getEventsFromProps(props.events),target);
if(!props.sharedEvents){
return ownEvents;
}
var getSharedEvents=props.sharedEvents.getEvents;
var sharedEvents=props.sharedEvents.events&&
getSharedEvents(getEventsFromProps(props.sharedEvents.events),target);
return(0,_assign3.default)({},sharedEvents,ownEvents);
},

getEventState:function getEventState(eventKey,namespace,childType){
if(!childType){
return this.state[eventKey]&&this.state[eventKey][namespace];
}
return this.state[childType]&&
this.state[childType][eventKey]&&
this.state[childType][eventKey][namespace];
},

getEventKey:function getEventKey(key){
// creates a data accessor function
// given a property key, path, array index, or null for identity.
if((0,_isFunction3.default)(key)){
return key;
}else if(key===null||typeof key==="undefined"){
return function(){return undefined;};
}
// otherwise, assume it is an array index, property key or path (_.property handles all three)
return(0,_property3.default)(key);
},

addEventKeys:function addEventKeys(props,data){
var eventKeyAccessor=this.getEventKey(props.eventKey);
return data.map(function(datum,index){
var eventKey=datum.eventKey||eventKeyAccessor(datum)||index;
return(0,_assign3.default)({eventKey:eventKey},datum);
});
}};