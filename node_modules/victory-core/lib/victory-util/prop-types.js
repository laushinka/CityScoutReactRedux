Object.defineProperty(exports,"__esModule",{value:true});var _isFunction2=require("lodash/isFunction");var _isFunction3=_interopRequireDefault(_isFunction2);

var _react=require("react");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}

/**
 * Return a new validator based on `validator` but with the option to chain
 * `isRequired` onto the validation. This is nearly identical to how React
 * does it internally, but they don't expose their helper for us to use.
 * @param {Function} validator Validation function.
 * @returns {Function} Validator with `isRequired` option.
 */
var makeChainable=function makeChainable(validator){
/* eslint-disable max-params */
var _chainable=function _chainable(isRequired,props,propName,componentName){
var value=props[propName];
if(typeof value==="undefined"||value===null){
if(isRequired){
return new Error("Required `"+
propName+"` was not specified in `"+componentName+"`.");

}
return null;
}for(var _len=arguments.length,rest=Array(_len>4?_len-4:0),_key=4;_key<_len;_key++){rest[_key-4]=arguments[_key];}
return validator.apply(undefined,[props,propName,componentName].concat(rest));
};
var chainable=_chainable.bind(null,false);
chainable.isRequired=_chainable.bind(null,true);
return chainable;
};/* global console */

var nullConstructor=function nullConstructor(){return null;};
var undefinedConstructor=function undefinedConstructor(){return undefined;};

/**
 * Get the constructor of `value`. If `value` is null or undefined, return the
 * special singletons `nullConstructor` or `undefinedConstructor`, respectively.
 * @param {*} value Instance to return the constructor of.
 * @returns {Function} Constructor of `value`.
 */
var getConstructor=function getConstructor(value){
if(typeof value==="undefined"){
return undefinedConstructor;
}else if(value===null){
return nullConstructor;
}else{
return value.constructor;
}
};

/**
 * Get the name of the constructor used to create `value`, using
 * `Object.protoype.toString`. If the value is null or undefined, return
 * "null" or "undefined", respectively.
 * @param {*} value Instance to return the constructor name of.
 * @returns {String} Name of the constructor.
 */
var getConstructorName=function getConstructorName(value){
if(typeof value==="undefined"){
return"undefined";
}else if(value===null){
return"null";
}
return Object.prototype.toString.call(value).slice(8,-1);
};exports.default=

{
/**
   * Return a new validator based on `propType` but which logs a `console.error`
   * with `explanation` if used.
   * @param {Function} propType The old, deprecated propType.
   * @param {String} explanation The message to provide the user of the deprecated propType.
   * @returns {Function} Validator which logs usage of this propType
   */
deprecated:function deprecated(propType,explanation){
return function(props,propName,componentName){for(var _len2=arguments.length,rest=Array(_len2>3?_len2-3:0),_key2=3;_key2<_len2;_key2++){rest[_key2-3]=arguments[_key2];}
if(process.env.NODE_ENV!=="production"){
/* eslint-disable no-console */
if(typeof console!=="undefined"&&console.error){
if(props[propName]!==null){
console.error(false,"\""+
propName+"\" property of \""+componentName+"\" has been deprecated "+explanation);
}
}
/* eslint-enable no-console */
}
return propType.apply(undefined,[props,propName,componentName].concat(rest));
};
},

/**
   * Return a new validator which returns true
   * if and only if all validators passed as arguments return true.
   * Like React.propTypes.oneOfType, except "all" instead of "any"
   * @param {Array} validators Validation functions.
   * @returns {Function} Combined validator function
   */
allOfType:function allOfType(validators){
return makeChainable(function(props,propName,componentName){for(var _len3=arguments.length,rest=Array(_len3>3?_len3-3:0),_key3=3;_key3<_len3;_key3++){rest[_key3-3]=arguments[_key3];}
var error=validators.reduce(function(result,validator){
return result||validator.apply(undefined,[props,propName,componentName].concat(rest));
},undefined);
if(error){
return error;
}
});
},

/**
   * Check that the value is a non-negative number.
   */
nonNegative:makeChainable(function(props,propName,componentName){for(var _len4=arguments.length,rest=Array(_len4>3?_len4-3:0),_key4=3;_key4<_len4;_key4++){rest[_key4-3]=arguments[_key4];}
var error=_react.PropTypes.number.apply(_react.PropTypes,[props,propName,componentName].concat(rest));
if(error){
return error;
}
var value=props[propName];
if(value<0){
return new Error("`"+
propName+"` in `"+componentName+"` must be non-negative.");

}
}),

/**
   * Check that the value is an integer.
   */
integer:makeChainable(function(props,propName,componentName){for(var _len5=arguments.length,rest=Array(_len5>3?_len5-3:0),_key5=3;_key5<_len5;_key5++){rest[_key5-3]=arguments[_key5];}
var error=_react.PropTypes.number.apply(_react.PropTypes,[props,propName,componentName].concat(rest));
if(error){
return error;
}
var value=props[propName];
if(value%1!==0){
return new Error("`"+
propName+"` in `"+componentName+"` must be an integer.");

}
}),

/**
   * Check that the value is greater than zero.
   */
greaterThanZero:makeChainable(function(props,propName,componentName){for(var _len6=arguments.length,rest=Array(_len6>3?_len6-3:0),_key6=3;_key6<_len6;_key6++){rest[_key6-3]=arguments[_key6];}
var error=_react.PropTypes.number.apply(_react.PropTypes,[props,propName,componentName].concat(rest));
if(error){
return error;
}
var value=props[propName];
if(value<=0){
return new Error("`"+
propName+"` in `"+componentName+"` must be greater than zero.");

}
}),

/**
   * Check that the value is an Array of two unique values.
   */
domain:makeChainable(function(props,propName,componentName){for(var _len7=arguments.length,rest=Array(_len7>3?_len7-3:0),_key7=3;_key7<_len7;_key7++){rest[_key7-3]=arguments[_key7];}
var error=_react.PropTypes.array.apply(_react.PropTypes,[props,propName,componentName].concat(rest));
if(error){
return error;
}
var value=props[propName];
if(value.length!==2||value[1]===value[0]){
return new Error("`"+
propName+"` in `"+componentName+"` must be an array of two unique numeric values.");

}
}),

/**
   * Check that the value looks like a d3 `scale` function.
   */
scale:makeChainable(function(props,propName,componentName){
var supportedScaleStrings=["linear","time","log","sqrt"];
var validScale=function validScale(scl){
if((0,_isFunction3.default)(scl)){
return(0,_isFunction3.default)(scl.copy)&&(0,_isFunction3.default)(scl.domain)&&(0,_isFunction3.default)(scl.range);
}else if(typeof scl==="string"){
return supportedScaleStrings.indexOf(scl)!==-1;
}
return false;
};

var value=props[propName];
if(!validScale(value)){
return new Error("`"+
propName+"` in `"+componentName+"` must be a d3 scale.");

}
}),

/**
   * Check that an array contains items of the same type.
   */
homogeneousArray:makeChainable(function(props,propName,componentName){for(var _len8=arguments.length,rest=Array(_len8>3?_len8-3:0),_key8=3;_key8<_len8;_key8++){rest[_key8-3]=arguments[_key8];}
var error=_react.PropTypes.array.apply(_react.PropTypes,[props,propName,componentName].concat(rest));
if(error){
return error;
}
var value=props[propName];
if(value.length>1){
var _constructor=getConstructor(value[0]);
for(var i=1;i<value.length;i++){
var otherConstructor=getConstructor(value[i]);
if(_constructor!==otherConstructor){
var constructorName=getConstructorName(value[0]);
var otherConstructorName=getConstructorName(value[i]);
return new Error(
"Expected `"+propName+"` in `"+componentName+"` to be a "+("homogeneous array, but found types `"+
constructorName+"` and ")+("`"+
otherConstructorName+"`."));

}
}
}
}),

/**
   * Check that array prop length matches props.data.length
   */
matchDataLength:makeChainable(function(props,propName){
if(
props[propName]&&
Array.isArray(props[propName])&&
props[propName].length!==props.data.length)
{
return new Error("Length of data and "+propName+" arrays must match.");
}
})};