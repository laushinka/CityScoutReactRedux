Object.defineProperty(exports,"__esModule",{value:true});var _defaults2=require("lodash/defaults");var _defaults3=_interopRequireDefault(_defaults2);var _partialRight2=require("lodash/partialRight");var _partialRight3=_interopRequireDefault(_partialRight2);var _isFunction2=require("lodash/isFunction");var _isFunction3=_interopRequireDefault(_isFunction2);var _assign2=require("lodash/assign");var _assign3=_interopRequireDefault(_assign2);var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();
var _react=require("react");var _react2=_interopRequireDefault(_react);
var _index=require("../victory-util/index");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var

VictorySharedEvents=function(_React$Component){_inherits(VictorySharedEvents,_React$Component);























































































function VictorySharedEvents(){_classCallCheck(this,VictorySharedEvents);var _this=_possibleConstructorReturn(this,Object.getPrototypeOf(VictorySharedEvents).call(this));

_this.state={};
_this.getScopedEvents=_index.Events.getScopedEvents.bind(_this);
_this.getEventState=_index.Events.getEventState.bind(_this);return _this;
}_createClass(VictorySharedEvents,[{key:"componentWillMount",value:function componentWillMount()

{
this.setUpChildren(this.props);
}},{key:"componentWillReceiveProps",value:function componentWillReceiveProps(

newProps){
this.setUpChildren(newProps);
}},{key:"setUpChildren",value:function setUpChildren(

props){
this.childComponents=_react2.default.Children.toArray(props.children);
var childBaseProps=this.getBasePropsFromChildren(this.childComponents);
var parentBaseProps=props.container?{parent:props.container.props}:{};
this.baseProps=(0,_assign3.default)({},childBaseProps,{parent:parentBaseProps});
}},{key:"getBasePropsFromChildren",value:function getBasePropsFromChildren(

childComponents){
var getBaseProps=function getBaseProps(children){
return children.reduce(function(memo,child,index){
if(child.type&&(0,_isFunction3.default)(child.type.getBaseProps)){
var baseChildProps=child.props&&child.type.getBaseProps(child.props);
if(baseChildProps){
var childKey=child.props.name||index;
memo[childKey]=baseChildProps;
return memo;
}
return memo;
}else if(child.props&&child.props.children){
return getBaseProps(_react2.default.Children.toArray(child.props.children));
}
return memo;
},{});
};
return getBaseProps(childComponents);
}},{key:"getNewChildren",value:function getNewChildren(

props){var _this2=this;var
events=props.events;var eventKey=props.eventKey;
var childNames=Object.keys(this.baseProps);

var alterChildren=function alterChildren(children){
return children.reduce(function(memo,child){
if(child.type&&(0,_isFunction3.default)(child.type.getBaseProps)){var _ret=function(){
var name=child.props.name||childNames.shift();
var childEvents=Array.isArray(events)&&
events.filter(function(event){
return Array.isArray(event.childName)?
event.childName.indexOf(name)>-1:
event.childName===name||event.childName==="all";
});
var sharedEvents={
events:childEvents,
getEvents:(0,_partialRight3.default)(_this2.getScopedEvents,name,_this2.baseProps),
getEventState:(0,_partialRight3.default)(_this2.getEventState,name)};

return{v:memo.concat(_react2.default.cloneElement(child,(0,_assign3.default)(
{key:"events-"+name,sharedEvents:sharedEvents,eventKey:eventKey},
child.props)))};}();if(typeof _ret==="object")return _ret.v;

}else if(child.props.children){
return memo.concat(_react2.default.cloneElement(
child,
child.props,
alterChildren(_react2.default.Children.toArray(child.props.children))));

}else{
return memo.concat(child);
}
},[]);
};

return alterChildren(this.childComponents);
}},{key:"getContainer",value:function getContainer(

props,children){
var parents=Array.isArray(props.events)&&
props.events.filter(function(event){return event.target==="parent";});
var sharedEvents=parents.length>0?
{
events:parents,
getEvents:(0,_partialRight3.default)(this.getScopedEvents,null,this.baseProps),
getEventState:(0,_partialRight3.default)(this.getEventState,null)}:
null;
var boundGetEvents=_index.Events.getEvents.bind(this);
var parentEvents=boundGetEvents({sharedEvents:sharedEvents},"parent");
var parentProps=(0,_defaults3.default)(
{},
this.getEventState("parent","parent"),
props.container.props,
this.baseProps.parent);

return _react2.default.cloneElement(
props.container,
(0,_assign3.default)(
{},parentProps,{events:_index.Events.getPartialEvents(parentEvents,"parent",parentProps)}),

children);

}},{key:"render",value:function render()

{
var children=this.getNewChildren(this.props);
return this.props.container?this.getContainer(this.props,children):_react2.default.createElement("g",null,children);

}}]);return VictorySharedEvents;}(_react2.default.Component);VictorySharedEvents.displayName="VictorySharedEvents";VictorySharedEvents.role="shared-event-wrapper";VictorySharedEvents.propTypes={/**
     * VictoryEvents is a wrapper component that coordinates events between child components,
     */children:_react2.default.PropTypes.oneOfType([_react2.default.PropTypes.arrayOf(_react2.default.PropTypes.node),_react2.default.PropTypes.node]),/**
     * The container prop specifies a container for the children to be rendered into.
     * If no container is provided, a <g> tag will be used. Shared parent events will only
     * be attached when a container prop is provided.
     */container:_react2.default.PropTypes.node,/**
     * The event prop take an array of event objects. Event objects are composed of
     * a childName, target, eventKey, and eventHandlers. Targets may be any valid style namespace
     * for a given component, (i.e. "data" and "labels"). The childName will refer to an
     * individual child, either by its name prop, or by index. Only Victory components
     * that actually render data should be targeted for use with shared events. The eventKey
     * may optionally be used to select a single element by index or eventKey rather than
     * an entire set. The eventHandlers object should be given as an object whose keys are standard
     * event names (i.e. onClick) and whose values are event callbacks. The return value
     * of an event handler is used to modify elemnts. The return value should be given
     * as an object or an array of objects with optional target and eventKey and childName keys,
     * and a mutation key whose value is a function. The target and eventKey and childName keys
     * will default to those corresponding to the element the event handler was attached to.
     * The mutation function will be called with the calculated props for the individual selected
     * element (i.e. a single bar), and the object returned from the mutation function
     * will override the props of the selected element via object assignment.
     * @examples
     * events={[
     *   {
     *     target: "data",
     *     childName: "firstBar",
     *     eventHandlers: {
     *       onClick: () => {
     *         return [
     *            {
     *              childName: "secondBar",
     *              mutation: (props) => {
     *                return {style: merge({}, props.style, {fill: "orange"})};
     *              }
     *            }, {
     *              childName: "secondBar",
     *              target: "labels",
     *              mutation: () => {
     *                return {text: "hey"};
     *              }
     *            }
     *          ];
     *       }
     *     }
     *   }
     * ]}
     *}}
     */events:_react.PropTypes.arrayOf(_react.PropTypes.shape({childName:_react.PropTypes.oneOfType([_react.PropTypes.string,_react.PropTypes.array]),target:_react.PropTypes.string,eventKey:_react.PropTypes.oneOfType([_react.PropTypes.array,_react.PropTypes.func,_index.PropTypes.allOfType([_index.PropTypes.integer,_index.PropTypes.nonNegative]),_react.PropTypes.string]),eventHandlers:_react.PropTypes.object})),/**
     * Similar to data accessor props `x` and `y`, this prop may be used to functionally
     * assign eventKeys to data
     */eventKey:_react.PropTypes.oneOfType([_react.PropTypes.array,_react.PropTypes.func,_index.PropTypes.allOfType([_index.PropTypes.integer,_index.PropTypes.nonNegative]),_react.PropTypes.string])};exports.default=VictorySharedEvents;