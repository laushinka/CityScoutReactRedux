Object.defineProperty(exports,"__esModule",{value:true});var _partialRight2=require("lodash/partialRight");var _partialRight3=_interopRequireDefault(_partialRight2);var _isFunction2=require("lodash/isFunction");var _isFunction3=_interopRequireDefault(_isFunction2);var _defaults2=require("lodash/defaults");var _defaults3=_interopRequireDefault(_defaults2);var _assign2=require("lodash/assign");var _assign3=_interopRequireDefault(_assign2);var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();
var _react=require("react");var _react2=_interopRequireDefault(_react);
var _victoryCore=require("victory-core");



var _axisLine=require("./axis-line");var _axisLine2=_interopRequireDefault(_axisLine);
var _helperMethods=require("./helper-methods");var _helperMethods2=_interopRequireDefault(_helperMethods);
var _axis=require("../../helpers/axis");var _axis2=_interopRequireDefault(_axis);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _toConsumableArray(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++){arr2[i]=arr[i];}return arr2;}else{return Array.from(arr);}}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}

var fallbackProps={
props:{
width:450,
height:300},

style:{
axis:{
fill:"none",
stroke:"#252525",
strokeWidth:1,
strokeLinecap:"round"},

axisLabel:{
fill:"#252525",
fontFamily:"'Gill Sans', 'Gill Sans MT', 'Ser­avek', 'Trebuchet MS', sans-serif",
fontSize:14,
letterSpacing:"0.04em",
padding:25,
stroke:"transparent"},

grid:{
fill:"none",
stroke:"transparent",
strokeLinecap:"round"},

ticks:{
fill:"none",
padding:10,
size:1,
stroke:"none",
strokeWidth:1,
strokeLinecap:"round"},

tickLabels:{
fill:"#252525",
fontFamily:"'Gill Sans', 'Gill Sans MT', 'Ser­avek', 'Trebuchet MS', sans-serif",
fontSize:14,
letterSpacing:"0.04em",
padding:10,
stroke:"transparent"}}};var




VictoryAxis=function(_React$Component){_inherits(VictoryAxis,_React$Component);










































































































































































































































































































































function VictoryAxis(){_classCallCheck(this,VictoryAxis);var _this=_possibleConstructorReturn(this,Object.getPrototypeOf(VictoryAxis).call(this));

_this.state={};
var getScopedEvents=_victoryCore.Events.getScopedEvents.bind(_this);
_this.getEvents=(0,_partialRight3.default)(_victoryCore.Events.getEvents.bind(_this),getScopedEvents);
_this.getEventState=_victoryCore.Helpers.getEventState.bind(_this);return _this;
}_createClass(VictoryAxis,[{key:"componentWillMount",value:function componentWillMount()

{
this.setupEvents(this.props);
}},{key:"componentWillReceiveProps",value:function componentWillReceiveProps(

newProps){
this.setupEvents(newProps);
}},{key:"setupEvents",value:function setupEvents(

props){var
sharedEvents=props.sharedEvents;
this.baseProps=_helperMethods2.default.getBaseProps(props,fallbackProps);
this.dataKeys=Object.keys(this.baseProps).filter(function(key){return key!=="parent";});
this.getSharedEventState=sharedEvents&&(0,_isFunction3.default)(sharedEvents.getEventState)?
sharedEvents.getEventState:function(){return undefined;};
}},{key:"renderLine",value:function renderLine(

props){
var key=0;
var axisEvents=this.getEvents(props,"axis",key);
var baseProps=this.baseProps[key];
var axisProps=(0,_defaults3.default)(
{},
this.getEventState(key,"axis"),
this.getSharedEventState(key,"axis"),
props.axisComponent.props,
baseProps?baseProps.axis:null);

return _react2.default.cloneElement(props.axisComponent,(0,_assign3.default)(
{},axisProps,{events:_victoryCore.Events.getPartialEvents(axisEvents,key,axisProps)}));

}},{key:"renderLabel",value:function renderLabel(

props){
var key=0;
var axisLabelEvents=this.getEvents(props,"axisLabel",key);
var baseProps=this.baseProps[key];
var axisLabelProps=(0,_defaults3.default)(
{},
this.getEventState(key,"axisLabel"),
this.getSharedEventState(key,"axisLabel"),
props.axisLabelComponent.props,
baseProps?baseProps.axisLabel:null);

return _react2.default.cloneElement(props.axisLabelComponent,(0,_assign3.default)(
{},axisLabelProps,{events:_victoryCore.Events.getPartialEvents(axisLabelEvents,key,axisLabelProps)}));

}},{key:"renderGridAndTicks",value:function renderGridAndTicks(

props){var
tickComponent=props.tickComponent;var tickLabelComponent=props.tickLabelComponent;var gridComponent=props.gridComponent;
var gridAndTickComponents=[];
for(var index=0,len=this.dataKeys.length;index<len;index++){
var key=this.dataKeys[index];
var tickEvents=this.getEvents(props,"ticks",key);
var tickProps=(0,_defaults3.default)(
{index:index},
this.getEventState(key,"ticks"),
this.getSharedEventState(key,"ticks"),
tickComponent.props,
this.baseProps[key].ticks);

var TickComponent=_react2.default.cloneElement(tickComponent,(0,_assign3.default)(
{},tickProps,{events:_victoryCore.Events.getPartialEvents(tickEvents,key,tickProps)}));

var gridEvents=this.getEvents(props,"grid",key);
var gridProps=(0,_defaults3.default)(
{index:index},
this.getEventState(key,"grid"),
this.getSharedEventState(key,"grid"),
gridComponent.props,
this.baseProps[key].grid);

var GridComponent=_react2.default.cloneElement(gridComponent,(0,_assign3.default)(
{},gridProps,{events:_victoryCore.Events.getPartialEvents(gridEvents,key,gridProps)}));

var tickLabelProps=(0,_defaults3.default)(
{index:index},
this.getEventState(key,"tickLabels"),
this.getSharedEventState(key,"tickLabels"),
tickLabelComponent.props,
this.baseProps[key].tickLabels);

var tickLabelEvents=this.getEvents(props,"tickLabels",key);
var TickLabel=_react2.default.cloneElement(tickLabelComponent,(0,_assign3.default)({
events:_victoryCore.Events.getPartialEvents(tickLabelEvents,key,tickLabelProps)},
tickLabelProps));

gridAndTickComponents[index]=_react2.default.cloneElement(
props.groupComponent,{key:"tick-group-"+key},GridComponent,TickComponent,TickLabel);

}
return gridAndTickComponents;
}},{key:"renderContainer",value:function renderContainer(

props,group){
var parentEvents=this.getEvents(props,"parent","parent");
var parentProps=(0,_defaults3.default)(
{},
this.getEventState("parent","parent"),
this.getSharedEventState("parent","parent"),
props.containerComponent.props,
this.baseProps.parent);

return _react2.default.cloneElement(
props.containerComponent,
(0,_assign3.default)(
{},parentProps,{events:_victoryCore.Events.getPartialEvents(parentEvents,"parent",parentProps)}),

group);

}},{key:"renderGroup",value:function renderGroup(

children,style){
return _react2.default.cloneElement.apply(_react2.default,[
this.props.groupComponent,
{role:"presentation",style:style}].concat(_toConsumableArray(
children)));

}},{key:"render",value:function render()

{
var modifiedProps=_victoryCore.Helpers.modifyProps(this.props,fallbackProps);var
animate=modifiedProps.animate;var standalone=modifiedProps.standalone;
if(animate){
// Do less work by having `VictoryAnimation` tween only values that
// make sense to tween. In the future, allow customization of animated
// prop whitelist/blacklist?
var whitelist=[
"style","domain","range","tickCount","tickValues",
"offsetX","offsetY","padding","width","height"];

return(
_react2.default.createElement(_victoryCore.VictoryTransition,{animate:animate,animationWhitelist:whitelist},
_react2.default.createElement(this.constructor,modifiedProps)));


}

var styleObject=modifiedProps.theme&&modifiedProps.theme.axis?modifiedProps.theme.axis:
fallbackProps.style;
var style=_helperMethods2.default.getStyles(modifiedProps,styleObject);
var children=[].concat(_toConsumableArray(
this.renderGridAndTicks(modifiedProps)),[
this.renderLine(modifiedProps),
this.renderLabel(modifiedProps)]);


var group=this.renderGroup(children,style.parent);

return standalone?this.renderContainer(modifiedProps,group):group;
}}]);return VictoryAxis;}(_react2.default.Component);VictoryAxis.displayName="VictoryAxis";VictoryAxis.role="axis";VictoryAxis.defaultTransitions={onExit:{duration:500},onEnter:{duration:500}};VictoryAxis.propTypes={/**
     * The animate prop specifies props for victory-animation to use. It this prop is
     * not given, the axis will not tween between changing data / style props.
     * Large datasets might animate slowly due to the inherent limits of svg rendering.
     * @examples {duration: 500, onEnd: () => alert("done!")}
     */animate:_react.PropTypes.object,/**
     * The axisComponent prop takes in an entire component which will be used
     * to create the axis line. The new element created from the passed axisComponent
     * will be supplied with the following properties: x1, y1, x2, y2, style and events.
     * Any of these props may be overridden by passing in props to the supplied component,
     * or modified or ignored within the custom component itself. If an axisComponent
     * is not supplied, VictoryAxis will render its default AxisLine component.
     */axisComponent:_react.PropTypes.element,/**
     * The axisLabelComponent prop takes in an entire component which will be used
     * to create the axis label. The new element created from the passed axisLabelComponent
     * will be supplied with the following properties: x, y, verticalAnchor, textAnchor,
     * angle, transform, style and events. Any of these props may be overridden by
     * passing in props to the supplied component, or modified or ignored within
     * the custom component itself. If an axisLabelComponent is not supplied, a new
     * VictoryLabel will be created with props described above
     */axisLabelComponent:_react.PropTypes.element,/**
     * This prop specifies whether a given axis is intended to cross another axis.
     */crossAxis:_react.PropTypes.bool,/**
     * The dependentAxis prop specifies whether the axis corresponds to the
     * dependent variable (usually y). This prop is useful when composing axis
     * with other components to form a chart.
     */dependentAxis:_react.PropTypes.bool,/**
     * The domainPadding prop specifies a number of pixels of padding to add to the
     * beginning and end of a domain. This prop is useful for explicitly spacing ticks farther
     * from the origin to prevent crowding. This prop should be given as an object with
     * numbers specified for x and y.
     */domainPadding:_react.PropTypes.oneOfType([_react.PropTypes.shape({x:_react.PropTypes.oneOfType([_react.PropTypes.number,_victoryCore.PropTypes.domain]),y:_react.PropTypes.oneOfType([_react.PropTypes.number,_victoryCore.PropTypes.domain])}),_react.PropTypes.number]),/**
     * The domain prop describes the range of values your axis will include. This prop should be
     * given as a array of the minimum and maximum expected values for your axis.
     * If this value is not given it will be calculated based on the scale or tickValues.
     * @examples [-1, 1]
     */domain:_react.PropTypes.oneOfType([_victoryCore.PropTypes.domain,_react.PropTypes.shape({x:_victoryCore.PropTypes.domain,y:_victoryCore.PropTypes.domain})]),/**
     * The event prop take an array of event objects. Event objects are composed of
     * a target, an eventKey, and eventHandlers. Targets may be any valid style namespace
     * for a given component, so "axis", "axisLabel", "ticks", "tickLabels", and "grid" are
     * all valid targets for VictoryAxis events. The eventKey may optionally be used to select a
     * single element by index rather than an entire set. The eventHandlers object
     * should be given as an object whose keys are standard event names (i.e. onClick)
     * and whose values are event callbacks. The return value of an event handler
     * be used to modify other elemnts. The return value should be given as an object or
     * an array of objects with optional target and eventKey keys, and a mutation
     * key whose value is a function. The target and eventKey keys will default to those
     * corresponding to the element the event handler was attached to. The mutation
     * function will be called with the calculated props for the individual selected
     * element (i.e. a single tick), and the object returned from the mutation function
     * will override the props of the selected element via object assignment.
     * @examples
     * events={[
     *   {
     *     target: "grid",
     *     eventKey: 2,
     *     eventHandlers: {
     *       onClick: () => {
     *         return [
     *           {
     *             mutation: (props) => {
     *               return {style: merge({}, props.style, {stroke: "orange"})};
     *             }
     *           }, {
     *             target: "tickLabels",
     *             mutation: () => {
     *               return {text: "hey"};
     *             }
     *           }
     *         ];
     *       }
     *     }
     *   }
     * ]}
     *}}
     */events:_react.PropTypes.arrayOf(_react.PropTypes.shape({target:_react.PropTypes.oneOf(["axis","axisLabel","grid","ticks","tickLabels","parent"]),eventKey:_react.PropTypes.oneOfType([_react.PropTypes.array,_victoryCore.PropTypes.allOfType([_victoryCore.PropTypes.integer,_victoryCore.PropTypes.nonNegative]),_react.PropTypes.string]),eventHandlers:_react.PropTypes.object})),/**
     * The name prop is used to reference a component instance when defining shared events.
     */name:_react.PropTypes.string,/**
     * This prop is used to coordinate events between VictoryAxis and other Victory
     * Components via VictorySharedEvents. This prop should not be set manually.
     */sharedEvents:_react.PropTypes.shape({events:_react.PropTypes.array,getEventState:_react.PropTypes.func}),/**
     * The gridComponent prop takes in an entire component which will be used
     * to create grid lines. The new element created from the passed gridComponent
     * will be supplied with the following properties: x1, y1, x2, y2, tick, style and events.
     * Any of these props may be overridden by passing in props to the supplied component,
     * or modified or ignored within the custom component itself. If a gridComponent
     * is not supplied, VictoryAxis will render its default GridLine component.
     */gridComponent:_react.PropTypes.element,/**
     * The height props specifies the height the svg viewBox of the chart container.
     * This value should be given as a number of pixels
     */height:_victoryCore.PropTypes.nonNegative,/**
     * The label prop defines the label that will appear along the axis. This
     * prop should be given as a value or an entire, HTML-complete label
     * component. If a label component is given, it will be cloned. The new
     * element's properties x, y, textAnchor, verticalAnchor, and transform
     * will have defaults provided by the axis; styles filled out with
     * defaults provided by the axis, and overrides from the label component.
     * If a value is given, a new VictoryLabel will be created with props and
     * styles from the axis.
     */label:_react.PropTypes.any,/**
     * This value describes how far from the "edge" of its permitted area each axis
     * will be set back in the x-direction.  If this prop is not given,
     * the offset is calculated based on font size, axis orientation, and label padding.
     */offsetX:_react.PropTypes.number,/**
     * This value describes how far from the "edge" of its permitted area each axis
     * will be set back in the y-direction.  If this prop is not given,
     * the offset is calculated based on font size, axis orientation, and label padding.
     */offsetY:_react.PropTypes.number,/**
     * The orientation prop specifies the position and orientation of your axis.
     */orientation:_react.PropTypes.oneOf(["top","bottom","left","right"]),/**
     * The padding props specifies the amount of padding in number of pixels between
     * the edge of the chart and any rendered child components. This prop can be given
     * as a number or as an object with padding specified for top, bottom, left
     * and right.
     */padding:_react.PropTypes.oneOfType([_react.PropTypes.number,_react.PropTypes.shape({top:_react.PropTypes.number,bottom:_react.PropTypes.number,left:_react.PropTypes.number,right:_react.PropTypes.number})]),/**
     * The scale prop determines which scales your axis should use. This prop can be
     * given as a `d3-scale@0.3.0` function or as a string corresponding to a supported d3-string
     * function.
     * @examples d3Scale.time(), "linear", "time", "log", "sqrt"
     */scale:_victoryCore.PropTypes.scale,/**
     * The standalone prop determines whether the component will render a standalone svg
     * or a <g> tag that will be included in an external svg. Set standalone to false to
     * compose VictoryAxis with other components within an enclosing <svg> tag.
     */standalone:_react.PropTypes.bool,/**
     * The style prop specifies styles for your VictoryAxis. Any valid inline style properties
     * will be applied. Height, width, and padding should be specified via the height,
     * width, and padding props, as they are used to calculate the alignment of
     * components within chart.
     * @examples {axis: {stroke: "#756f6a"}, grid: {stroke: "grey"}, ticks: {stroke: "grey"},
     * tickLabels: {fontSize: 10, padding: 5}, axisLabel: {fontSize: 16, padding: 20}}
     */style:_react.PropTypes.shape({parent:_react.PropTypes.object,axis:_react.PropTypes.object,axisLabel:_react.PropTypes.object,grid:_react.PropTypes.object,ticks:_react.PropTypes.object,tickLabels:_react.PropTypes.object}),/**
     * The tickComponent prop takes in an entire component which will be used
     * to create tick lines. The new element created from the passed tickComponent
     * will be supplied with the following properties: x1, y1, x2, y2, tick, style and events.
     * Any of these props may be overridden by passing in props to the supplied component,
     * or modified or ignored within the custom component itself. If a tickComponent
     * is not supplied, VictoryAxis will render its default Tick component.
     */tickComponent:_react.PropTypes.element,/**
     * The tickCount prop specifies approximately how many ticks should be drawn on the axis if
     * tickValues are not explicitly provided. This value is calculated by d3 scale and
     * prioritizes returning "nice" values and evenly spaced ticks over an exact number of ticks.
     * If you need an exact number of ticks, please specify them via the tickValues prop.
     * This prop must have a value greater than zero.
     */tickCount:_victoryCore.PropTypes.allOfType([_victoryCore.PropTypes.integer,_victoryCore.PropTypes.greaterThanZero]),/**
     * The tickLabelComponent prop takes in an entire component which will be used
     * to create the tick labels. The new element created from the passed tickLabelComponent
     * will be supplied with the following properties: x, y, verticalAnchor, textAnchor,
     * angle, tick, style and events. Any of these props may be overridden by
     * passing in props to the supplied component, or modified or ignored within
     * the custom component itself. If an tickLabelComponent is not supplied, a new
     * VictoryLabel will be created with props described above
     */tickLabelComponent:_react.PropTypes.element,/**
     * The tickFormat prop specifies how tick values should be expressed visually.
     * tickFormat can be given as a function to be applied to every tickValue, or as
     * an array of display values for each tickValue.
     * @examples d3.time.format("%Y"), (x) => x.toPrecision(2), ["first", "second", "third"]
     */tickFormat:_react.PropTypes.oneOfType([_react.PropTypes.func,_victoryCore.PropTypes.homogeneousArray]),/**
     * The tickValues prop explicitly specifies which tick values to draw on the axis.
     * @examples ["apples", "bananas", "oranges"], [2, 4, 6, 8]
     */tickValues:_victoryCore.PropTypes.homogeneousArray,/**
     * The width props specifies the width of the svg viewBox of the chart container
     * This value should be given as a number of pixels
     */width:_victoryCore.PropTypes.nonNegative,/**
     * The containerComponent prop takes an entire component which will be used to
     * create a container element for standalone charts.
     * The new element created from the passed containerComponent wil be provided with
     * these props from VictoryAxis: height, width, children
     * (the chart itself) and style. Props that are not provided by the
     * child chart component include title and desc, both of which
     * are intended to add accessibility to Victory components. The more descriptive these props
     * are, the more accessible your data will be for people using screen readers.
     * Any of these props may be overridden by passing in props to the supplied component,
     * or modified or ignored within the custom component itself. If a dataComponent is
     * not provided, VictoryAxis will use the default VictoryContainer component.
     * @examples <VictoryContainer title="Chart of Dog Breeds" desc="This chart shows how
     * popular each dog breed is by percentage in Seattle." />
     */containerComponent:_react.PropTypes.element,/**
    * The theme prop takes a style object with nested axis, ticks, axisLabel, grid, and
    * tickLabels objects. You can create this object yourself, or you can use a theme provided by
    * Victory. When using VictoryAxis as a solo component, implement the theme directly on
    * VictoryAxis. If you are wrapping VictoryAxis in VictoryChart, VictoryStack, or
    * VictoryGroup, please call the theme on the outermost wrapper component instead.
    * @examples theme={VictoryTheme.material}
    */theme:_react.PropTypes.object,/**
     * The groupComponent prop takes an entire component which will be used to
     * create group elements for use within container elements. This prop defaults
     * to a <g> tag on web, and a react-native-svg <G> tag on mobile
     */groupComponent:_react.PropTypes.element};VictoryAxis.defaultProps={axisComponent:_react2.default.createElement(_axisLine2.default,{type:"axis"}),axisLabelComponent:_react2.default.createElement(_victoryCore.VictoryLabel,null),tickLabelComponent:_react2.default.createElement(_victoryCore.VictoryLabel,null),tickComponent:_react2.default.createElement(_axisLine2.default,{type:"tick"}),gridComponent:_react2.default.createElement(_axisLine2.default,{type:"grid"}),padding:50,scale:"linear",standalone:true,tickCount:5,containerComponent:_react2.default.createElement(_victoryCore.VictoryContainer,null),groupComponent:_react2.default.createElement("g",null)};VictoryAxis.getDomain=_helperMethods2.default.getDomain.bind(_helperMethods2.default);VictoryAxis.getAxis=_axis2.default.getAxis.bind(_axis2.default);VictoryAxis.getScale=_helperMethods2.default.getScale.bind(_helperMethods2.default);VictoryAxis.getStyles=(0,_partialRight3.default)(_helperMethods2.default.getStyles.bind(_helperMethods2.default),fallbackProps.style);VictoryAxis.getBaseProps=(0,_partialRight3.default)(_helperMethods2.default.getBaseProps.bind(_helperMethods2.default),fallbackProps);exports.default=VictoryAxis;