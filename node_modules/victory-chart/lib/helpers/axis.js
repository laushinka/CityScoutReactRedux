Object.defineProperty(exports,"__esModule",{value:true});var _identity2=require("lodash/identity");var _identity3=_interopRequireDefault(_identity2);var _victoryCore=require("victory-core");

var _react=require("react");var _react2=_interopRequireDefault(_react);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _toConsumableArray(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++){arr2[i]=arr[i];}return arr2;}else{return Array.from(arr);}}exports.default=

{
/**
   * Returns the axis (x or y) of a particular axis component
   * @param {Object} props: the props object.
   * @param {Boolean} flipped: true when the axis component is in an atypical orientation
   * @returns {String} the dimension appropriate for the axis given its props
   */
getAxis:function getAxis(props){
if(props.orientation){
var vertical={top:"x",bottom:"x",left:"y",right:"y"};
return vertical[props.orientation];
}
return props.dependentAxis?"y":"x";
},

getCurrentAxis:function getCurrentAxis(axis,horizontal){
var otherAxis=axis==="x"?"y":"x";
return horizontal?otherAxis:axis;
},

/**
   * Returns a single axis component of the desired axis type (x or y)
   * @param {Array} childComponents: an array of children
   * @param {String} axis: desired axis either "x" or "y".
   * @returns {ReactComponent} an axis component of the desired axis or undefined
   */
getAxisComponent:function getAxisComponent(childComponents,axis){
var matchesAxis=function matchesAxis(component){
var type=component.type.getAxis(component.props);
return type===axis;
};
return this.findAxisComponents(childComponents,matchesAxis)[0];
},

/**
   * Returns all axis components that pass a given predicate
   * @param {Array} childComponents: an array of children
   * @param {Function} predicate: a predicate function that will be called with each
   * @returns {Array} all axis components that pass the given predicate or []
   */
findAxisComponents:function findAxisComponents(childComponents,predicate){
predicate=predicate||_identity3.default;
var findAxes=function findAxes(children){
return children.reduce(function(memo,child){
if(child.type&&child.type.role==="axis"&&predicate(child)){
return memo.concat(child);
}else if(child.props&&child.props.children){
return memo.concat(findAxes(_react2.default.Children.toArray(child.props.children)));
}
return memo;
},[]);
};

return findAxes(childComponents);
},

/**
   * Returns all axis components of the desired axis type (x or y) along with any
   * parent components excluding VictoryChart
   * @param {Array} childComponents: an optional array of children.
   * @param {String} type: desired axis either "dependent" or "independent".
   * @returns {ReactComponent} an axis component of the desired type or undefined
   */
getAxisComponentsWithParent:function getAxisComponentsWithParent(childComponents,type){
var matchesType=function matchesType(child){
return type==="dependent"?child.props.dependentAxis:!child.props.dependentAxis;
};

var findAxisComponents=function findAxisComponents(children){
return children.reduce(function(memo,child){
if(child.type&&child.type.role==="axis"&&matchesType(child)){
return memo.concat(child);
}else if(child.props&&child.props.children){
var childAxis=findAxisComponents(_react2.default.Children.toArray(child.props.children));
return childAxis.length>0?memo.concat(child):memo;
}
return memo;
},[]);
};

return findAxisComponents(childComponents);
},

getOrigin:function getOrigin(domain){
var getSingleOrigin=function getSingleOrigin(){
var domainMin=Math.min.apply(Math,_toConsumableArray(domain));
var domainMax=Math.max.apply(Math,_toConsumableArray(domain));
return domainMax<0?domainMax:Math.max(0,domainMin);
};

return _victoryCore.Collection.containsDates(domain)?
new Date(Math.min.apply(Math,_toConsumableArray(domain))):getSingleOrigin();
},

getOriginSign:function getOriginSign(origin,domain){
var getSign=function getSign(){
return origin<=0&&Math.max.apply(Math,_toConsumableArray(domain))<=0?"negative":"positive";
};
return _victoryCore.Collection.containsDates(domain)?"positive":getSign();
},

/**
   * @param {ReactComponent} component: a victory axis component.
   * @param {String} axis: desired axis either "x" or "y".
   * @param {String} originSign: "positive" or "negative"
   * @returns {String} the orientation of the axis ("top", "bottom", "left", or "right")
   */
getOrientation:function getOrientation(component,axis,originSign){
if(component&&component.props&&component.props.orientation){
return component.props.orientation;
}
var sign=originSign||"positive";
var typicalOrientations={
positive:{x:"bottom",y:"left"},
negative:{x:"top",y:"right"}};

var flippedOrientations={
positive:{x:"left",y:"bottom"},
negative:{x:"right",y:"top"}};

if(!component){
return typicalOrientations[sign][axis];
}
var dependent=component.props.dependentAxis;
return!dependent&&axis==="y"||dependent&&axis==="x"?
flippedOrientations[sign][axis]:typicalOrientations[sign][axis];
},

/**
   * @param {Array} childComponents: an array of children
   * @returns {Object} an object with orientations specified for x and y
   */
getAxisOrientations:function getAxisOrientations(childComponents){
return{
x:this.getOrientation(this.getAxisComponent(childComponents,"x"),"x"),
y:this.getOrientation(this.getAxisComponent(childComponents,"y"),"y")};

},

/**
   * @param {Object} props: axis component props
   * @returns {Boolean} true when the axis is vertical
   */
isVertical:function isVertical(props){
var orientation=props.orientation||(props.dependentAxis?"left":"bottom");
var vertical={top:false,bottom:false,left:true,right:true};
return vertical[orientation];
},

/**
   * @param {Object} props: axis component props
   * @returns {Boolean} true when tickValues contain strings
   */
stringTicks:function stringTicks(props){
return props.tickValues!==undefined&&_victoryCore.Collection.containsStrings(props.tickValues);
}};