Object.defineProperty(exports,"__esModule",{value:true});var _isFunction2=require("lodash/isFunction");var _isFunction3=_interopRequireDefault(_isFunction2);var _includes2=require("lodash/includes");var _includes3=_interopRequireDefault(_includes2);var _flatten2=require("lodash/flatten");var _flatten3=_interopRequireDefault(_flatten2);
var _victoryCore=require("victory-core");
var _d3Scale=require("d3-scale");var d3Scale=_interopRequireWildcard(_d3Scale);function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}else{var newObj={};if(obj!=null){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key))newObj[key]=obj[key];}}newObj.default=obj;return newObj;}}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}

var supportedScaleStrings=["linear","time","log","sqrt"];exports.default=

{

getDefaultScale:function getDefaultScale(){
return d3Scale.scaleLinear();
},

toNewName:function toNewName(scale){
// d3 scale changed the naming scheme for scale from "linear" -> "scaleLinear" etc.
var capitalize=function capitalize(s){return s&&s[0].toUpperCase()+s.slice(1);};
return"scale"+capitalize(scale);
},

validScale:function validScale(scale){
if(typeof scale==="function"){
return(0,_isFunction3.default)(scale.copy)&&(0,_isFunction3.default)(scale.domain)&&(0,_isFunction3.default)(scale.range);
}else if(typeof scale==="string"){
return(0,_includes3.default)(supportedScaleStrings,scale);
}
return false;
},

isScaleDefined:function isScaleDefined(props,axis){
if(!props.scale){
return false;
}else if(props.scale.x||props.scale.y){
return props.scale[axis]?true:false;
}
return true;
},

getScaleFromProps:function getScaleFromProps(props,axis){
if(!this.isScaleDefined(props,axis)){
return undefined;
}
var scale=props.scale[axis]||props.scale;

if(this.validScale(scale)){
return(0,_isFunction3.default)(scale)?scale:d3Scale[this.toNewName(scale)]();
}
},

getScaleTypeFromData:function getScaleTypeFromData(props,axis){
if(!props.data){
return"linear";
}
var accessor=_victoryCore.Helpers.createAccessor(props[axis]);
var allData=(0,_flatten3.default)(props.data);
var axisData=allData.map(accessor);
return _victoryCore.Collection.containsDates(axisData)?"time":"linear";
},

getBaseScale:function getBaseScale(props,axis){
var scale=this.getScaleFromProps(props,axis);
if(scale){
return scale;
}
var dataScale=this.getScaleTypeFromData(props,axis);
return d3Scale[this.toNewName(dataScale)]();
},

getScaleType:function getScaleType(props,axis){
var scale=this.getScaleFromProps(props,axis);
// if the scale was not given in props, it will be set to linear or time depending on data
if(!scale){
return this.getScaleTypeFromData(props,axis);
}else if(typeof scale==="string"){
return(0,_includes3.default)(supportedScaleStrings,scale)?scale:"invalid";
}else if(!this.validScale(scale)){
return"invalid";
}
var duckTypes=[
{name:"log",method:"base"},
{name:"ordinal",method:"unknown"},
{name:"pow-sqrt",method:"exponent"},
{name:"quantile",method:"quantiles"},
{name:"quantize-threshold",method:"invertExtent"}];

var scaleType=duckTypes.filter(function(type){
return scale[type.method]!==undefined;
})[0];
if(scaleType){
return scaleType.name;
}
return this.getScaleTypeFromData(props,axis);
}};