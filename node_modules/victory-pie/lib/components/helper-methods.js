Object.defineProperty(exports,"__esModule",{value:true});var _omit2=require("lodash/omit");var _omit3=_interopRequireDefault(_omit2);var _isFunction2=require("lodash/isFunction");var _isFunction3=_interopRequireDefault(_isFunction2);var _defaults2=require("lodash/defaults");var _defaults3=_interopRequireDefault(_defaults2);var _assign2=require("lodash/assign");var _assign3=_interopRequireDefault(_assign2);
var _d3Shape=require("d3-shape");var _d3Shape2=_interopRequireDefault(_d3Shape);

var _victoryCore=require("victory-core");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}exports.default=

{
checkForValidText:function checkForValidText(text){
if(text===undefined||text===null){
return text;
}else{
return""+text;
}
},

getSliceStyle:function getSliceStyle(datum,index,calculatedValues){var
style=calculatedValues.style;var colors=calculatedValues.colors;
var fill=this.getColor(style,colors,index);
var dataStyles=(0,_omit3.default)(datum,["x","y","label"]);
var sliceStyle=(0,_defaults3.default)({},{fill:fill},style.data,dataStyles);
return _victoryCore.Helpers.evaluateStyle(sliceStyle,datum);
},

getBaseProps:function getBaseProps(props,fallbackProps){
var calculatedValues=this.getCalculatedValues(props,fallbackProps);var
slices=calculatedValues.slices;var style=calculatedValues.style;var pathFunction=calculatedValues.pathFunction;var labelPosition=calculatedValues.labelPosition;var
width=props.width;var height=props.height;
var childProps={parent:{slices:slices,pathFunction:pathFunction,width:width,height:height,style:style.parent}};
for(var index=0,len=slices.length;index<len;index++){
var slice=slices[index];
var datum=slice.data;
var eventKey=datum.eventKey||index;
var dataProps={
index:index,
slice:slice,
pathFunction:pathFunction,
style:this.getSliceStyle(datum,index,calculatedValues),
datum:datum};


var text=this.getLabelText(props,datum,index);
var position=labelPosition.centroid(slice);
var labelStyle=_victoryCore.Helpers.evaluateStyle(
(0,_assign3.default)({padding:0},style.labels),
dataProps.datum);


var labelProps={
style:labelStyle,
x:position[0],
y:position[1],
slice:slice,
text:this.checkForValidText(text),
index:index,
datum:dataProps.datum,
textAnchor:labelStyle.textAnchor||"start",
verticalAnchor:labelStyle.verticalAnchor||"middle",
angle:labelStyle.angle};

childProps[eventKey]={
data:dataProps,
labels:labelProps};

}
return childProps;
},

getCalculatedValues:function getCalculatedValues(props,fallbackProps){
var theme=props.theme&&props.theme.pie;
var styleObject=theme?props.theme.pie.style:
fallbackProps.style;
var style=_victoryCore.Helpers.getStyles(props.style,styleObject,"auto","100%");
var getColorScale=function getColorScale(){
return theme?theme.props.colorScale:fallbackProps.colorScale;
};
var colorScale=props.colorScale||getColorScale();
var colors=Array.isArray(colorScale)?
colorScale:_victoryCore.Style.getColorScale(colorScale);
var padding=_victoryCore.Helpers.getPadding(props);
var radius=this.getRadius(props,padding);
var data=_victoryCore.Events.addEventKeys(props,_victoryCore.Helpers.getData(props));
var labelPosition=this.getLabelPosition(props,style,radius);
var layoutFunction=this.getSliceFunction(props);
var slices=layoutFunction(data);
var pathFunction=_d3Shape2.default.arc().
cornerRadius(props.cornerRadius).
outerRadius(radius).
innerRadius(props.innerRadius);
return{style:style,colors:colors,padding:padding,radius:radius,data:data,slices:slices,labelPosition:labelPosition,pathFunction:pathFunction};
},

getColor:function getColor(style,colors,index){
if(style&&style.data&&style.data.fill){
return style.data.fill;
}
return colors[index%colors.length];
},

getRadius:function getRadius(props,padding){
return Math.min(
props.width-padding.left-padding.right,
props.height-padding.top-padding.bottom)/
2;
},

getLabelPosition:function getLabelPosition(props,style,radius){
// TODO: better label positioning
var innerRadius=props.innerRadius?
props.innerRadius+style.labels.padding:
style.labels.padding;
return _d3Shape2.default.arc().
outerRadius(radius).
innerRadius(innerRadius);
},

getLabelText:function getLabelText(props,datum,index){
if(datum.label){
return datum.label;
}else if(Array.isArray(props.labels)){
return props.labels[index];
}
return(0,_isFunction3.default)(props.labels)?props.labels(datum):datum.xName||datum.x;
},

getSliceFunction:function getSliceFunction(props){
var degreesToRadians=function degreesToRadians(degrees){
return degrees*(Math.PI/180);
};

return _d3Shape2.default.pie().
sort(null).
startAngle(degreesToRadians(props.startAngle)).
endAngle(degreesToRadians(props.endAngle)).
padAngle(degreesToRadians(props.padAngle)).
value(function(datum){return datum.y;});
}};