Object.defineProperty(exports,"__esModule",{value:true});var _partialRight2=require("lodash/partialRight");var _partialRight3=_interopRequireDefault(_partialRight2);var _isFunction2=require("lodash/isFunction");var _isFunction3=_interopRequireDefault(_isFunction2);var _defaults2=require("lodash/defaults");var _defaults3=_interopRequireDefault(_defaults2);var _assign2=require("lodash/assign");var _assign3=_interopRequireDefault(_assign2);var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=require("react");var _react2=_interopRequireDefault(_react);

var _victoryCore=require("victory-core");






var _slice=require("./slice");var _slice2=_interopRequireDefault(_slice);
var _helperMethods=require("./helper-methods");var _helperMethods2=_interopRequireDefault(_helperMethods);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}

var fallbackProps={
style:{
data:{
padding:10,
stroke:"transparent",
strokeWidth:0},

labels:{
fill:"#252525",
fontFamily:"'Gill Sans', 'Gill Sans MT', 'SerÂ­avek', 'Trebuchet MS', sans-serif",
fontSize:14,
letterSpacing:"0.04em",
padding:10,
stroke:"transparent",
strokeWidth:0,
textAnchor:"middle"}},


colorScale:[
"#ffffff",
"#f0f0f0",
"#d9d9d9",
"#bdbdbd",
"#969696",
"#737373",
"#525252",
"#252525",
"#000000"]};var



VictoryPie=function(_React$Component){_inherits(VictoryPie,_React$Component);














































































































































































































































































































function VictoryPie(){_classCallCheck(this,VictoryPie);var _this=_possibleConstructorReturn(this,Object.getPrototypeOf(VictoryPie).call(this));

_this.state={};
var getScopedEvents=_victoryCore.Events.getScopedEvents.bind(_this);
_this.getEvents=(0,_partialRight3.default)(_victoryCore.Events.getEvents.bind(_this),getScopedEvents);
_this.getEventState=_victoryCore.Events.getEventState.bind(_this);return _this;
}_createClass(VictoryPie,[{key:"componentWillMount",value:function componentWillMount()

{
this.setupEvents(this.props);
}},{key:"componentWillReceiveProps",value:function componentWillReceiveProps(

newProps){
this.setupEvents(newProps);
}},{key:"setupEvents",value:function setupEvents(

props){var
sharedEvents=props.sharedEvents;
this.baseProps=_helperMethods2.default.getBaseProps(props,fallbackProps);
this.dataKeys=Object.keys(this.baseProps).filter(function(key){return key!=="parent";});
this.getSharedEventState=sharedEvents&&(0,_isFunction3.default)(sharedEvents.getEventState)?
sharedEvents.getEventState:function(){return undefined;};
}},{key:"renderData",value:function renderData(

props){
var sliceComponents=[];
var sliceLabelComponents=[];
// this.dataKeys.forEach((key) => {
for(var index=0,len=this.dataKeys.length;index<len;index++){
var key=this.dataKeys[index];
var dataEvents=this.getEvents(props,"data",key);
var dataProps=(0,_defaults3.default)(
{key:"pie-"+key},
this.getEventState(key,"data"),
this.getSharedEventState(key,"data"),
this.baseProps[key].data,
props.dataComponent.props);

sliceComponents[index]=_react2.default.cloneElement(props.dataComponent,(0,_assign3.default)(
{},dataProps,{events:_victoryCore.Events.getPartialEvents(dataEvents,key,dataProps)}));


var labelProps=(0,_defaults3.default)(
{key:"pie-label-"+key},
this.getEventState(key,"labels"),
this.getSharedEventState(key,"labels"),
this.baseProps[key].labels,
props.labelComponent.props);

if(labelProps&&labelProps.text){
var labelEvents=this.getEvents(props,"labels",key);
sliceLabelComponents[index]=_react2.default.cloneElement(props.labelComponent,(0,_assign3.default)({
events:_victoryCore.Events.getPartialEvents(labelEvents,key,labelProps)},
labelProps));
}
}

return sliceLabelComponents.length>0?
_react2.default.cloneElement.apply(_react2.default,[
props.groupComponent,{key:"pie-group"}].concat(sliceComponents,sliceLabelComponents)):

sliceComponents;
}},{key:"renderContainer",value:function renderContainer(

props,group){
var parentEvents=this.getEvents(props,"parent","parent");
var parentProps=(0,_defaults3.default)(
{},
this.getEventState("parent","parent"),
this.getSharedEventState("parent","parent"),
props.containerComponent.props,
this.baseProps.parent);

return _react2.default.cloneElement(
props.containerComponent,
(0,_assign3.default)(
{},parentProps,{events:_victoryCore.Events.getPartialEvents(parentEvents,"parent",parentProps)}),

group);

}},{key:"renderGroup",value:function renderGroup(

children,style,offset){var
x=offset.x;var y=offset.y;
return _react2.default.cloneElement(
this.props.groupComponent,
{role:"presentation",style:style,transform:"translate("+x+", "+y+")"},
children);

}},{key:"render",value:function render()

{
// If animating, return a `VictoryAnimation` element that will create
// a new `VictoryBar` with nearly identical props, except (1) tweened
// and (2) `animate` set to null so we don't recurse forever.
if(this.props.animate){
var whitelist=[
"data","endAngle","height","innerRadius","cornerRadius","padAngle","padding",
"colorScale","startAngle","style","width"];

return(
_react2.default.createElement(_victoryCore.VictoryTransition,{animate:this.props.animate,animationWhitelist:whitelist},
_react2.default.createElement(this.constructor,this.props)));


}

var calculatedProps=_helperMethods2.default.getCalculatedValues(this.props,fallbackProps);var
style=calculatedProps.style;var padding=calculatedProps.padding;var radius=calculatedProps.radius;
var offset={x:radius+padding.left,y:radius+padding.top};
var children=this.renderData(this.props,calculatedProps);
var group=this.renderGroup(children,style.parent,offset);
return this.props.standalone?this.renderContainer(this.props,group):group;
}}]);return VictoryPie;}(_react2.default.Component);VictoryPie.defaultTransitions={onExit:{duration:500,before:function before(){return{y:0,label:" "};}},onEnter:{duration:500,before:function before(){return{y:0,label:" "};},after:function after(datum){return{y:datum.y,label:datum.label};}}};VictoryPie.propTypes={/**
     * The animate prop specifies props for victory-animation to use. If this prop is
     * not given, the pie chart will not tween between changing data / style props.
     * Large datasets might animate slowly due to the inherent limits of svg rendering.
     * @examples {duration: 500, onEnd: () => alert("done!")}
     */animate:_react.PropTypes.object,/**
     * The colorScale prop is an optional prop that defines the color scale the pie
     * will be created on. This prop should be given as an array of CSS colors, or as a string
     * corresponding to one of the built in color scales. VictoryPie will automatically assign
     * values from this color scale to the pie slices unless colors are explicitly provided in the
     * data object
     */colorScale:_react.PropTypes.oneOfType([_react.PropTypes.arrayOf(_react.PropTypes.string),_react.PropTypes.oneOf(["greyscale","qualitative","heatmap","warm","cool","red","green","blue"])]),/**
     * The data prop specifies the data to be plotted,
     * where data X-value is the slice label (string or number),
     * and Y-value is the corresponding number value represented by the slice
     * Data should be in the form of an array of data points.
     * Each data point may be any format you wish (depending on the `x` and `y` accessor props),
     * but by default, an object with x and y properties is expected.
     * @examples [{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],
     * [[{x: "a", y: 1}, {x: "b", y: 2}], [{x: "a", y: 2}, {x: "b", y: 3}]]
     */data:_react.PropTypes.array,/**
     * The dataComponent prop takes an entire, HTML-complete data component which will be used to
     * create slices for each datum in the pie chart. The new element created from the passed
     * dataComponent will have the property datum set by the pie chart for the point it renders;
     * properties style and pathFunction calculated by VictoryPie; an index property set
     * corresponding to the location of the datum in the data provided to the pie; events bound to
     * the VictoryPie; and the d3 compatible slice object.
     * If a dataComponent is not provided, VictoryPie's Slice component will be used.
     */dataComponent:_react.PropTypes.element,/**
     * The overall end angle of the pie in degrees. This prop is used in conjunction with
     * startAngle to create a pie that spans only a segment of a circle.
     */endAngle:_react.PropTypes.number,/**
     * The event prop takes an array of event objects. Event objects are composed of
     * a target, an eventKey, and eventHandlers. Targets may be any valid style namespace
     * for a given component, so "data" and "labels" are all valid targets for VictoryPie
     * events. The eventKey may optionally be used to select a single element by index rather than
     * an entire set. The eventHandlers object should be given as an object whose keys are standard
     * event names (i.e. onClick) and whose values are event callbacks. The return value
     * of an event handler is used to modify elemnts. The return value should be given
     * as an object or an array of objects with optional target and eventKey keys,
     * and a mutation key whose value is a function. The target and eventKey keys
     * will default to those corresponding to the element the event handler was attached to.
     * The mutation function will be called with the calculated props for the individual selected
     * element (i.e. a single bar), and the object returned from the mutation function
     * will override the props of the selected element via object assignment.
     * @examples
     * events={[
     *   {
     *     target: "data",
     *     eventKey: 1,
     *     eventHandlers: {
     *       onClick: () => {
     *         return [
     *            {
     *              eventKey: 2,
     *              mutation: (props) => {
     *                return {style: merge({}, props.style, {fill: "orange"})};
     *              }
     *            }, {
     *              eventKey: 2,
     *              target: "labels",
     *              mutation: () => {
     *                return {text: "hey"};
     *              }
     *            }
     *          ];
     *       }
     *     }
     *   }
     * ]}
     *}}
     */events:_react.PropTypes.arrayOf(_react.PropTypes.shape({target:_react.PropTypes.oneOf(["data","labels","parent"]),eventKey:_react.PropTypes.oneOfType([_react.PropTypes.func,_victoryCore.PropTypes.allOfType([_victoryCore.PropTypes.integer,_victoryCore.PropTypes.nonNegative]),_react.PropTypes.string]),eventHandlers:_react.PropTypes.object})),/**
     * The name prop is used to reference a component instance when defining shared events.
     */name:_react.PropTypes.string,/**
     * Similar to data accessor props `x` and `y`, this prop may be used to functionally
     * assign eventKeys to data
     */eventKey:_react.PropTypes.oneOfType([_react.PropTypes.func,_victoryCore.PropTypes.allOfType([_victoryCore.PropTypes.integer,_victoryCore.PropTypes.nonNegative]),_react.PropTypes.string]),/**
     * This prop is used to coordinate events between VictoryArea and other Victory
     * Components via VictorySharedEvents. This prop should not be set manually.
     */sharedEvents:_react.PropTypes.shape({events:_react.PropTypes.array,getEventState:_react.PropTypes.func}),/**
     * The height props specifies the height of the chart container element in pixels
     */height:_victoryCore.PropTypes.nonNegative,/**
     * When creating a donut chart, this prop determines the number of pixels between
     * the center of the chart and the inner edge of a donut. When this prop is set to zero
     * a regular pie chart is rendered.
     */innerRadius:_victoryCore.PropTypes.nonNegative,/**
     * Set the cornerRadius for every dataComponent (Slice by default) within VictoryPie
     */cornerRadius:_victoryCore.PropTypes.nonNegative,/**
     * The labelComponent prop takes in an entire label component which will be used
     * to create labels for each slice in the pie chart. The new element created from
     * the passed labelComponent will be supplied with the following properties:
     * x, y, index, datum, verticalAnchor, textAnchor, angle, style, text, and events.
     * any of these props may be overridden by passing in props to the supplied component,
     * or modified or ignored within the custom component itself. If labelComponent is omitted,
     * a new VictoryLabel will be created with props described above.
     */labelComponent:_react.PropTypes.element,/**
     * The labels prop defines labels that will appear in each slice on your pie chart.
     * This prop should be given as an array of values or as a function of data.
     * If given as an array, the number of elements in the array should be equal to
     * the length of the data array. Labels may also be added directly to the data object
     * like data={[{x: 1, y: 1, label: "first"}]}. If labels are not provided, they
     * will be created based on x values. If you don't want to render labels, pass
     * an empty array or a function that returns undefined.
     * @examples: ["spring", "summer", "fall", "winter"], (datum) => datum.title
     */labels:_react.PropTypes.oneOfType([_react.PropTypes.func,_react.PropTypes.array]),/**
     * The padAngle prop determines the amount of separation between adjacent data slices
     * in number of degrees
     */padAngle:_victoryCore.PropTypes.nonNegative,/**
     * The padding props specifies the amount of padding in number of pixels between
     * the edge of the chart and any rendered child components. This prop can be given
     * as a number or as an object with padding specified for top, bottom, left
     * and right.
     */padding:_react.PropTypes.oneOfType([_react.PropTypes.number,_react.PropTypes.shape({top:_react.PropTypes.number,bottom:_react.PropTypes.number,left:_react.PropTypes.number,right:_react.PropTypes.number})]),/**
     * The standalone prop determines whether VictoryPie should render as a standalone
     * svg, or in a g tag to be included in an svg
     */standalone:_react.PropTypes.bool,/**
     * The overall start angle of the pie in degrees. This prop is used in conjunction with
     * endAngle to create a pie that spans only a segment of a circle.
     */startAngle:_react.PropTypes.number,/**
     * The style prop specifies styles for your pie. VictoryPie relies on Radium,
     * so valid Radium style objects should work for this prop. Height, width, and
     * padding should be specified via the height, width, and padding props.
     * @examples {data: {stroke: "black"}, label: {fontSize: 10}}
     */style:_react.PropTypes.shape({parent:_react.PropTypes.object,data:_react.PropTypes.object,labels:_react.PropTypes.object}),/**
     * The width props specifies the width of the chart container element in pixels
     */width:_victoryCore.PropTypes.nonNegative,/**
     * The x prop specifies how to access the X value of each data point.
     * If given as a function, it will be run on each data point, and returned value will be used.
     * If given as an integer, it will be used as an array index for array-type data points.
     * If given as a string, it will be used as a property key for object-type data points.
     * If given as an array of strings, or a string containing dots or brackets,
     * it will be used as a nested object property path (for details see Lodash docs for _.get).
     * If `null` or `undefined`, the data value will be used as is (identity function/pass-through).
     * @examples 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)
     */x:_react.PropTypes.oneOfType([_react.PropTypes.func,_victoryCore.PropTypes.allOfType([_victoryCore.PropTypes.integer,_victoryCore.PropTypes.nonNegative]),_react.PropTypes.string,_react.PropTypes.arrayOf(_react.PropTypes.string)]),/**
     * The y prop specifies how to access the Y value of each data point.
     * If given as a function, it will be run on each data point, and returned value will be used.
     * If given as an integer, it will be used as an array index for array-type data points.
     * If given as a string, it will be used as a property key for object-type data points.
     * If given as an array of strings, or a string containing dots or brackets,
     * it will be used as a nested object property path (for details see Lodash docs for _.get).
     * If `null` or `undefined`, the data value will be used as is (identity function/pass-through).
     * @examples 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)
     */y:_react.PropTypes.oneOfType([_react.PropTypes.func,_victoryCore.PropTypes.allOfType([_victoryCore.PropTypes.integer,_victoryCore.PropTypes.nonNegative]),_react.PropTypes.string,_react.PropTypes.arrayOf(_react.PropTypes.string)]),/**
     * The containerComponent prop takes an entire component which will be used to
     * create a container element for standalone charts.
     * The new element created from the passed containerComponent wil be provided with
     * these props from VictoryPie: height, width, children
     * (the chart itself) and style. Props that are not provided by the
     * child chart component include title and desc, both of which
     * are intended to add accessibility to Victory components. The more descriptive these props
     * are, the more accessible your data will be for people using screen readers.
     * Any of these props may be overridden by passing in props to the supplied component,
     * or modified or ignored within the custom component itself. If a dataComponent is
     * not provided, VictoryPie will use the default VictoryContainer component.
     * @examples <VictoryContainer title="Chart of Dog Breeds" desc="This chart shows how
     * popular each dog breed is by percentage in Seattle." />
     */containerComponent:_react.PropTypes.element,/**
    * The theme prop takes a style object with nested data, labels, and parent objects.
    * You can create this object yourself, or you can use a theme provided by Victory.
    * @examples theme={Grayscale}
    */theme:_react.PropTypes.object,/**
     * The groupComponent prop takes an entire component which will be used to
     * create group elements for use within container elements. This prop defaults
     * to a <g> tag on web, and a react-native-svg <G> tag on mobile
     */groupComponent:_react.PropTypes.element};VictoryPie.defaultProps={data:[{x:"A",y:1},{x:"B",y:2},{x:"C",y:3},{x:"D",y:1},{x:"E",y:2}],endAngle:360,height:400,innerRadius:0,cornerRadius:0,padAngle:0,padding:30,startAngle:0,standalone:true,width:400,x:"x",y:"y",dataComponent:_react2.default.createElement(_slice2.default,null),labelComponent:_react2.default.createElement(_victoryCore.VictoryLabel,null),containerComponent:_react2.default.createElement(_victoryCore.VictoryContainer,null),groupComponent:_react2.default.createElement("g",null)};VictoryPie.getBaseProps=(0,_partialRight3.default)(_helperMethods2.default.getBaseProps.bind(_helperMethods2.default),fallbackProps);exports.default=VictoryPie;